{"version":3,"sources":["models/deck.js","models/board-tile.js","Server/actions/setup.js","utils/consts.js","models/card.js","utils/secret.js","models/place.js","models/enums.js","utils/board.js","utils/card.js","utils/menu.js","models/menu-reveal.js","models/versus-content.js","Server/actions/board.js","utils/help.js","Server/actions/hand.js","Server/actions/deck.js","Server/actions/destroy.js","Server/actions/out.js","models/image-data.js","Server/actions/controls.js","Game.js","service/api.js","models/menu.js","Client/ui/components/menus/menu.jsx","Client/ui/components/card/card-art.jsx","Client/ui/components/card/card.jsx","Client/ui/components/general/button.jsx","Client/ui/components/menus/menu-header.jsx","utils/strings.js","Client/ui/components/menus/menu-list.jsx","Client/ui/components/general/number-input.jsx","Client/ui/components/menus/menu-life.jsx","Client/ui/images/swords.png","Client/ui/components/general/no-input-layer.jsx","Client/ui/components/menus/menu-reveal.jsx","Client/ui/components/menus/menu-stats.jsx","Client/ui/components/fragments/menu-layer.jsx","Client/ui/components/gameplay/jar.jsx","utils/style-class.js","Client/ui/components/fragments/deck-column.jsx","Client/ui/components/gameplay/hand.jsx","Client/ui/components/gameplay/board.jsx","Client/ui/components/fragments/hand-column.jsx","Client/ui/images/react-img.png","Client/ui/components/fragments/control-column.jsx","Client/ui/components/general/status-segment.jsx","Client/ui/components/fragments/status-column.jsx","models/action.js","models/menu-list.js","Client/actions/deck.js","models/menu-life.js","models/temp-select.js","Client/actions/hand.js","models/menu-stats.js","Client/actions/board.js","Client/actions/destroy.js","Client/actions/out.js","Client/handlers/arena.js","Client/ui/pages/arena.jsx","App.js","reportWebVitals.js","index.js"],"names":["Deck","id","cards","obj","BoardTile","spawn","x","y","originalX","originalY","setupDeck","ctx","setupData","console","log","deck","i","numPlayers","push","setupProps","players","content","prop","Consts","deckSize","handSize","board","maxLife","Card","playerID","title","type","art","atk","hp","range","atk_mod","hp_mod","range_mod","element","unique","description","direction","tags","status","controller","inversed","flipped","getDirection","code","result","toString","split","forEach","bit","index","hideBoardRivalFlippedCard","myID","map","row","tile","length","maskedCards","card","maskCard","maskTile","hideRivalDeck","rivalID","maskCardArray","hideRivalArray","array","cardArray","controllerID","maskedArray","HideSecrets","G","parseInt","hand","Place","cordX","cordY","Types","SelectTypes","Origin","getTileCardsArray","place","getTileCard","renderBoard","flip","flippedBoard","flippedY","getCurentATK","getCurentHP","getCurrentRange","setStats","stats","newCard","resetStats","resetCard","splice","doWhenClickOutside","ref","action","document","body","addEventListener","event","current","contains","target","pushToReveal","reveal","menu","item","MenuRevealData","topText","bottomText","VersusContent","atker","atked","attacker","attacked","BoardActions","placeInHere","selected","player","origin","Object","keys","originContent","realCard","checkSelection","originName","originIndex","INVALID_MOVE","unshift","selectToBoard","toBoard","attackCard","flipCard","invertCard","applyStats","cardList","activateCard","tickCard","bounceCard","destroyCard","destroyZone","finishCard","out","attachArtifact","tileCardToBack","tileCardToFront","moveToArray","destination","reverse","orNothing","val","isEmpty","HandActions","backToTopDeck","backToBottomDeck","destroy","finish","draw","pop","DeckActions","setDeck","drawForTurn","searchToHand","searchToDZ","searchToOOG","shuffleDeck","random","Shuffle","mill","number","count","DestroyActions","backToHand","destroyToOOG","OutActions","recycle","placeID","ImageData","MiscActions","clearReveal","shift","setLife","lp","life","callReact","image","Simulator","name","setup","moves","minPlayers","maxPlayers","turn","order","TurnOrder","DEFAULT","activePlayers","ActivePlayers","ALL","playerView","api","axios","create","baseURL","getDeckService","deckID","a","get","response","data","MenuData","posX","posY","actions","Menu","items","clear","clickRef","React","useRef","style","window","innerHeight","left","top","bottom","useEffect","className","onClick","apply","args","menuClick","CardArt","src","location","alt","defaultProps","highlight","extraClass","click","children","onMouseEnter","e","checkAndRender","Button","hidden","MenuHeader","header","Strings","deckHeader","myDZHeader","rivalDZHeader","oogHeader","boardHeader","MenuList","ids","getExtraCardClass","NumberInput","value","setValue","onChange","isNaN","MenuLife","useState","lifePoints","setLifePoints","NoInputLayer","MenuReveal","hasOwnProperty","Fragment","VersusIcon","getContent","MenuStats","cardName","setCardAtk","setCardHP","setCardRange","isRangeEnable","setIsRangeEnable","checked","rangeCheck","getRange","MenuLayer","listMenu","actionMenu","revealMenu","statsMenu","lifeMenu","Array","isArray","pageX","pageY","actionsMenu","Jar","ClassNames","getExtraClasses","condition","extraClassName","cond","DeckColumn","decks","dzs","selection","myDeck","rivalDeck","myDZ","rivalDZ","isSelected","deckMenu","dzMenu","oogMenu","at","checkDeck","Hand","list","handMenu","Board","dominionIds","getClassName","getLifeTile","clickSpawnTile","getCardView","myLifeMenu","isInversed","clickCardTile","renderOverlay","renderInfo","renderStats","field","filter","isFieldOnTile","clickPlus","onMouseLeave","getTileCardsList","stopPropagation","renderRange","j","typeName","renderTile","propTypes","PropTypes","arrayOf","object","HandColumn","myHand","rivalHand","boardMenu","clearSelectionCallback","setHighlightCard","ControlColumn","currentPlayer","events","ReactImage","endTurn","StatusSegment","StatusColumn","getStatClass","originalStat","currentStat","currentATK","currentHP","currentRange","renderStatus","HtmlParser","tag","renderTags","Action","MenuListData","constructDeck","mappedCards","rawData","ID","assign","NAME","TYPE","ART","ATK","HP","RANGE","SUBTYPE","Boolean","UNIQUE","DESCRIPTION","DIRECTION_RANGE","TAGS","CARD_QUANTITY","mapToCard","getDeckForSearch","getDeckActionsOnMenu","MenuLifeData","Temp","selectToField","spawnFaceUp","spawnFaceDown","getHandActionsOnMenu","pos","MenuStatusData","select","moveInBoard","openStatsMenu","selectToAttack","getBoardActionMenu","getMultipleCardBoardActions","getCardTypeBasedActions","BoardActionsMenu","dz","reborn","getDZForSearch","mine","getOOGForSearch","ArenaActions","setActionMenu","setLifeMenu","setListMenu","setStatsMenu","setSelectToBoard","getLifeMenu","clearListMenu","wasDeckMenu","setTimeout","global","clearMenuCallback","Arena","highlightCard","setters","getters","params","clientSideMoves","deckStart","undefined","SimulatorClient","Client","game","debug","multiplayer","SocketIO","server","App","hostname","setPlayerID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cd805374.chunk.js","sourcesContent":["const Deck = (id = 0, cards = []) => {\r\n  let obj = {\r\n    id: id,\r\n    cards: cards,\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport default Deck;\r\n","const BoardTile = (spawn, x, y) => {\r\n  if (spawn < 0) {\r\n    return null;\r\n  } else {\r\n    let obj = {\r\n      originalX: x,\r\n      originalY: y,\r\n      spawn: spawn,\r\n      cards: [],\r\n    };\r\n\r\n    return obj;\r\n  }\r\n};\r\n\r\nexport default BoardTile;\r\n","import Deck from \"../../models/deck\";\r\nimport BoardTile from \"../../models/board-tile\";\r\n\r\nexport const setupDeck = (ctx, setupData) => {\r\n  console.log(\"Setup Data: \" + setupData);\r\n  const deck = [];\r\n  for (let i = 0; i < ctx.numPlayers; i++) {\r\n    deck.push(Deck());\r\n  }\r\n  return deck;\r\n};\r\n\r\nexport const setupProps = (players, content) => {\r\n  const prop = [];\r\n  for (let i = 0; i < players; i++) {\r\n    prop.push(content);\r\n  }\r\n  return prop;\r\n};\r\n\r\nexport const setupBoard = (board) => {\r\n  return board.map((row, y) => row.map((tile, x) => BoardTile(tile, x, y)));\r\n};\r\n","//Game Constants\r\nconst board = [\r\n  [-1, -1, -1, 0, -1, -1, -1],\r\n  [-1, -1, 0, 0, 0, -1, -1],\r\n  [-1, 1, 0, 0, 0, 2, -1],\r\n  [3, 1, 0, 0, 0, 2, 4],\r\n  [-1, 1, 0, 0, 0, 2, -1],\r\n  [-1, -1, 0, 0, 0, -1, -1],\r\n  [-1, -1, -1, 0, -1, -1, -1],\r\n];\r\n\r\nconst Consts = {\r\n  deckSize: 30,\r\n  handSize: 4,\r\n  board: board,\r\n  maxLife: 20,\r\n};\r\n\r\nexport default Consts;\r\n","const Card = (id, playerID) => {\r\n  let obj = {\r\n    id: id,\r\n    title: \"\",\r\n    type: \"\",\r\n    art: \"\",\r\n    atk: 0,\r\n    hp: 0,\r\n    range: 0,\r\n    atk_mod: 0,\r\n    hp_mod: 0,\r\n    range_mod: 0,\r\n    element: \"\",\r\n    unique: false,\r\n    description: \"\",\r\n    direction: [],\r\n    tags: [],\r\n    status: [],\r\n    controller: playerID,\r\n    inversed: false,\r\n    flipped: false,\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport const mapToCard = (rawData, id) => {\r\n  let result = [];\r\n  let card = Card(rawData.ID, id);\r\n  Object.assign(card, {\r\n    title: rawData.NAME,\r\n    type: rawData.TYPE,\r\n    art: rawData.ART,\r\n    atk: rawData.ATK,\r\n    hp: rawData.HP,\r\n    range: rawData.RANGE,\r\n    element: rawData.SUBTYPE,\r\n    unique: Boolean(rawData.UNIQUE),\r\n    description: rawData.DESCRIPTION,\r\n    direction: getDirection(rawData.DIRECTION_RANGE),\r\n    tags: rawData.TAGS.split(\",\"),\r\n  });\r\n\r\n  for (let i = 1; i <= rawData.CARD_QUANTITY; i++) {\r\n    result.push(card);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst getDirection = (code) => {\r\n  let result = [];\r\n  let bits = code.toString().split(\"\");\r\n  bits.forEach((bit, index) => {\r\n    if (bit === \"1\") {\r\n      switch (index) {\r\n        case 0:\r\n          result.push(\"N\");\r\n          return;\r\n        case 1:\r\n          result.push(\"NE\");\r\n          return;\r\n        case 2:\r\n          result.push(\"E\");\r\n          return;\r\n        case 3:\r\n          result.push(\"SE\");\r\n          return;\r\n        case 4:\r\n          result.push(\"S\");\r\n          return;\r\n        case 5:\r\n          result.push(\"SW\");\r\n          return;\r\n        case 6:\r\n          result.push(\"W\");\r\n          return;\r\n        case 7:\r\n          result.push(\"NW\");\r\n          return;\r\n        default:\r\n          return;\r\n      }\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nexport default Card;\r\n","import Card from \"../models/card\";\r\nimport Deck from \"../models/deck\";\r\n\r\nconst HideSecrets = (G, ctx, playerID) => {\r\n  const result = { ...G };\r\n  const rivalID = parseInt(playerID) === 0 ? 1 : 0;\r\n\r\n  result.deck = hideRivalDeck(result.deck, parseInt(playerID), rivalID);\r\n  result.hand = hideRivalArray(result.hand, parseInt(playerID), rivalID);\r\n  result.board = hideBoardRivalFlippedCard(result.board, parseInt(playerID));\r\n\r\n  return result;\r\n};\r\n\r\nconst hideBoardRivalFlippedCard = (board, myID) => {\r\n  return board.map((row) => {\r\n    return row.map((tile) => {\r\n      if (tile && tile.cards && tile.cards.length > 0) {\r\n        let maskedCards = tile.cards.map((card) => {\r\n          if (card.controller !== myID && card.flipped && !card.inversed) {\r\n            return maskCard(card.controller);\r\n          }\r\n          return card;\r\n        });\r\n        return maskTile(maskedCards, tile);\r\n      }\r\n      return tile;\r\n    });\r\n  });\r\n};\r\n\r\nconst maskTile = (cards, tile) => {\r\n  let maskTile = { ...tile };\r\n  maskTile.cards = cards;\r\n  return maskTile;\r\n};\r\n\r\nconst hideRivalDeck = (deck, myID, rivalID) => {\r\n  let result = [];\r\n  result[myID] = deck[myID];\r\n  result[rivalID] = Deck(0, maskCardArray(deck[rivalID].cards, rivalID));\r\n  return result;\r\n};\r\n\r\nconst hideRivalArray = (array, myID, rivalID) => {\r\n  let result = [];\r\n  result[myID] = array[myID];\r\n  result[rivalID] = maskCardArray(array[rivalID], rivalID);\r\n  return result;\r\n};\r\n\r\nconst maskCardArray = (cardArray, controllerID) => {\r\n  let maskedArray = [];\r\n\r\n  cardArray.forEach((card) => {\r\n    maskedArray.push(maskCard(controllerID));\r\n  });\r\n\r\n  return maskedArray;\r\n};\r\n\r\nconst maskCard = (controllerID) => {\r\n  let maskCard = Card(\"\", controllerID);\r\n  maskCard.flipped = true;\r\n  return maskCard;\r\n};\r\n\r\nexport default HideSecrets;\r\n","const Place = (cordX, cordY) => {\r\n  let obj = {\r\n    x: cordX,\r\n    y: cordY,\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport default Place;\r\n","export const Elements = {\r\n  FIRE: \"fire\",\r\n  WATER: \"water\",\r\n  EARTH: \"earth\",\r\n  AIR: \"air\",\r\n  THUNDER: \"thunder\",\r\n  VOID: \"void\",\r\n};\r\n\r\nexport const Types = {\r\n  UNITY: \"Unity\",\r\n  ARTIFACT: \"Artifact\",\r\n  FIELD: \"Field\",\r\n  TOKEN: \"Token\",\r\n};\r\n\r\nexport const SelectTypes = {\r\n  TO_BOARD: \"ToBoard\",\r\n  TO_ATTACK: \"ToAttack\",\r\n};\r\n\r\nexport const Origin = {\r\n  HAND: \"hand\",\r\n  DECK: \"deck\",\r\n  DZ: \"destroyZone\",\r\n  OUT: \"out\",\r\n  BOARD: \"board\",\r\n};\r\n","import { INVALID_MOVE } from \"boardgame.io/core\";\r\nimport { Types } from \"../models/enums\";\r\n\r\nexport const getTileCardsArray = (board, place) => {\r\n  return board[place.y][place.x].cards;\r\n};\r\n\r\nexport const isFieldOnTile = (cards) => {\r\n  return cards.filter((card) => card.type === Types.FIELD)[0];\r\n};\r\n\r\nexport const getTileCard = (board, place, index) => {\r\n  return board[place.y][place.x].cards[index];\r\n};\r\n\r\nexport const toBoard = (G, origin, index, place) => {\r\n  let tile = G.board[place.y][place.x];\r\n\r\n  if (tile) {\r\n    let item = origin.splice(index, 1)[0];\r\n    tile.cards.unshift(item);\r\n    G.selectToBoard = null;\r\n  } else {\r\n    return INVALID_MOVE;\r\n  }\r\n};\r\n\r\nexport const renderBoard = (board, playerID) => {\r\n  switch (playerID) {\r\n    case 0:\r\n      return board;\r\n    case 1:\r\n      return flip(board);\r\n    default:\r\n      return board;\r\n  }\r\n};\r\n\r\nconst flip = (board) => {\r\n  let flippedBoard = [];\r\n  let flippedY = 0;\r\n  const rowLength = board.length;\r\n  for (let y = rowLength - 1; y >= 0; y--) {\r\n    flippedBoard.push([]);\r\n    const columnLength = board[y].length;\r\n    for (let x = columnLength - 1; x >= 0; x--) {\r\n      flippedBoard[flippedY].push(board[y][x]);\r\n    }\r\n    flippedY++;\r\n  }\r\n  return flippedBoard;\r\n};\r\n","export const getCurentATK = (card) => {\r\n  return card.atk + card.atk_mod;\r\n};\r\n\r\nexport const getCurentHP = (card) => {\r\n  return card.hp + card.hp_mod;\r\n};\r\n\r\nexport const getCurrentRange = (card) => {\r\n  return card.range + card.range_mod;\r\n};\r\n\r\nexport const setStats = (card, stats) => {\r\n  let newCard = { ...card };\r\n  let { atk, hp, range } = stats;\r\n  newCard.atk_mod = atk - card.atk;\r\n  newCard.hp_mod = hp - card.hp;\r\n  newCard.range_mod = range - card.range;\r\n  return newCard;\r\n};\r\n\r\nexport const resetStats = (card) => {\r\n  let resetCard = { ...card };\r\n  resetCard.atk_mod = 0;\r\n  resetCard.hp_mod = 0;\r\n  resetCard.range_mod = 0;\r\n  resetCard.status.splice(0, resetCard.status.length);\r\n  resetCard.inversed = false;\r\n  resetCard.flipped = false;\r\n  return resetCard;\r\n};\r\n","export const doWhenClickOutside = (ref, action) => {\r\n  let documentOverride = (event) => {\r\n    if (ref.current && !ref.current.contains(event.target)) {\r\n      action();\r\n    }\r\n  };\r\n\r\n  document.body.addEventListener(\"mousedown\", documentOverride);\r\n};\r\n\r\nexport const pushToReveal = (reveal, menu, myID) => {\r\n  return reveal.map((item, id) => {\r\n    if (id !== myID) {\r\n      item.push(menu);\r\n    }\r\n    return item;\r\n  });\r\n};\r\n","const MenuRevealData = (topText, content, bottomText) => {\r\n  let obj = {\r\n    topText: topText || \"\",\r\n    content: content,\r\n    bottomText: bottomText || \"\",\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport default MenuRevealData;\r\n","const VersusContent = (atker, atked) => {\r\n  let obj = {\r\n    attacker: atker,\r\n    attacked: atked,\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport default VersusContent;\r\n","import Place from \"../../models/place\";\r\nimport { Origin } from \"../../models/enums\";\r\nimport { getTileCard, getTileCardsArray, toBoard } from \"../../utils/board\";\r\nimport { resetStats, setStats } from \"../../utils/card\";\r\nimport { pushToReveal } from \"../../utils/menu\";\r\nimport MenuRevealData from \"../../models/menu-reveal\";\r\nimport VersusContent from \"../../models/versus-content\";\r\n\r\nconst checkSelection = (G, selected, player) => {\r\n  let origin = Object.keys(selected.origin)[0];\r\n  let originContent = selected.origin[origin];\r\n\r\n  let realCard =\r\n    origin !== Origin.BOARD\r\n      ? G[origin][player][originContent]\r\n      : G[origin][selected.y][selected.x].cards[originContent];\r\n\r\n  if (selected && selected.card.id === realCard.id) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst placeInHere = (G, ctx, selected, x, y) => {\r\n  if (checkSelection(G, selected, ctx.playerID)) {\r\n    let place = Place(x, y);\r\n    let originName = Object.keys(selected.origin)[0];\r\n    let originIndex = selected.origin[originName];\r\n    if (selected.flipped && originName !== Origin.BOARD) {\r\n      selected.card.flipped = selected.flipped;\r\n      G[originName][ctx.playerID][originIndex] = selected.card;\r\n    }\r\n    let origin =\r\n      originName !== Origin.BOARD\r\n        ? G[originName][ctx.playerID]\r\n        : G[originName][selected.y][selected.x].cards;\r\n    toBoard(G, origin, originIndex, place);\r\n  }\r\n};\r\n\r\nconst applyStats = (G, ctx, place, stats, index = 0) => {\r\n  let card = getTileCard(G.board, place, index);\r\n  let cardList = getTileCardsArray(G.board, place);\r\n  cardList[index] = setStats(card, stats);\r\n};\r\n\r\nconst attackCard = (G, ctx, selected, card) => {\r\n  let attacker = selected.card;\r\n  let content = VersusContent(attacker, card);\r\n  let topText = `${attacker.title} attacks ${card.title}`;\r\n  G.reveal = pushToReveal(G.reveal, MenuRevealData(topText, content), -1);\r\n};\r\n\r\nconst flipCard = (G, ctx, place, index = 0) => {\r\n  let card = getTileCard(G.board, place, index);\r\n  card.flipped = !card.flipped;\r\n};\r\n\r\nconst invertCard = (G, ctx, place, index = 0) => {\r\n  let card = getTileCard(G.board, place, index);\r\n  card.inversed = !card.inversed;\r\n};\r\n\r\nconst activateCard = (G, ctx, place, index = 0) => {\r\n  let content = getTileCard(G.board, place, index);\r\n  let topText = `Your opponent have declared ${content.title} effect`;\r\n  G.reveal = pushToReveal(\r\n    G.reveal,\r\n    MenuRevealData(topText, content),\r\n    parseInt(ctx.playerID)\r\n  );\r\n};\r\n\r\nconst tickCard = (card) => {};\r\n\r\nconst bounceCard = (G, ctx, place, index = 0) => {\r\n  let card = resetStats(getTileCard(G.board, place, index));\r\n  let cardList = getTileCardsArray(G.board, place);\r\n  G.hand[ctx.playerID].push(card);\r\n  cardList.splice(index, 1);\r\n};\r\n\r\nconst destroyCard = (G, ctx, place, index = 0) => {\r\n  let card = resetStats(getTileCard(G.board, place, index));\r\n  let cardList = getTileCardsArray(G.board, place);\r\n  G.destroyZone[ctx.playerID].push(card);\r\n  cardList.splice(index, 1);\r\n};\r\n\r\nconst finishCard = (G, ctx, place, index = 0) => {\r\n  let card = resetStats(getTileCard(G.board, place, index));\r\n  let cardList = getTileCardsArray(G.board, place);\r\n  G.out.push(card);\r\n  cardList.splice(index, 1);\r\n};\r\n\r\nconst attachArtifact = (G, ctx, place, index = 0) => {};\r\n\r\nconst tileCardToBack = (G, ctx, place, index = 0) => {\r\n  let cardList = getTileCardsArray(G.board, place);\r\n  cardList.push(cardList.splice(index, 1)[0]);\r\n};\r\n\r\nconst tileCardToFront = (G, ctx, place, index = 0) => {\r\n  let cardList = getTileCardsArray(G.board, place);\r\n  cardList.unshift(cardList.splice(index, 1)[0]);\r\n};\r\n\r\nconst BoardActions = {\r\n  placeInHere,\r\n  attackCard,\r\n  flipCard,\r\n  invertCard,\r\n  applyStats,\r\n  activateCard,\r\n  tickCard,\r\n  bounceCard,\r\n  destroyCard,\r\n  finishCard,\r\n  attachArtifact,\r\n  tileCardToBack,\r\n  tileCardToFront,\r\n};\r\n\r\nexport default BoardActions;\r\n","export const randomInt = (maxNumber, ctx) => {\r\n  return parseInt(ctx.random.Number() * maxNumber);\r\n};\r\n\r\nexport const moveToArray = (origin, destination, index, reverse = false) => {\r\n  let item = origin.splice(index, 1)[0];\r\n  if (reverse) {\r\n    destination.unshift(item);\r\n  } else {\r\n    destination.push(item);\r\n  }\r\n};\r\n\r\nexport const orNothing = (val) => {\r\n  if (val) {\r\n    return val;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const numberOrZero = (number) => {\r\n  return isNaN(number) ? 0 : number;\r\n};\r\n\r\nexport const isEmpty = (array) => {\r\n  return array.length <= 0;\r\n};\r\n","import { moveToArray } from \"../../utils/help\";\r\n\r\nconst backToTopDeck = (G, ctx, index) => {\r\n  moveToArray(G.hand[ctx.playerID], G.deck[ctx.playerID].cards, index);\r\n};\r\n\r\nconst backToBottomDeck = (G, ctx, index) => {\r\n  moveToArray(G.hand[ctx.playerID], G.deck[ctx.playerID].cards, index, true);\r\n};\r\n\r\nconst destroy = (G, ctx, index) => {\r\n  moveToArray(G.hand[ctx.playerID], G.destroyZone[ctx.playerID], index);\r\n};\r\n\r\nconst finish = (G, ctx, index) => {\r\n  moveToArray(G.hand[ctx.playerID], G.out, index);\r\n};\r\n\r\nconst HandActions = {\r\n  backToTopDeck,\r\n  backToBottomDeck,\r\n  destroy,\r\n  finish,\r\n};\r\n\r\nexport default HandActions;\r\n","import Consts from \"../../utils/consts\";\r\nimport { moveToArray } from \"../../utils/help\";\r\nimport { pushToReveal } from \"../../utils/menu\";\r\nimport MenuRevealData from \"../../models/menu-reveal\";\r\n\r\nconst setDeck = (G, ctx, deck) => {\r\n  G.deck[ctx.playerID] = deck;\r\n};\r\n\r\nconst draw = (G, ctx) => {\r\n  if (G.deck[ctx.playerID].cards.length > 0) {\r\n    let draw = G.deck[ctx.playerID].cards.pop();\r\n    G.hand[ctx.playerID].push(draw);\r\n  }\r\n};\r\n\r\nconst drawForTurn = (G, ctx) => {\r\n  while (\r\n    G.hand[ctx.playerID].length < Consts.handSize &&\r\n    G.deck[ctx.playerID].cards.length > 0\r\n  ) {\r\n    draw(G, ctx);\r\n  }\r\n};\r\n\r\nconst searchToHand = (G, ctx, index) => {\r\n  let content = G.deck[ctx.playerID].cards[index];\r\n  let topText = `Your opponent have selected ${content.title} from Deck to Hand`;\r\n  G.reveal = pushToReveal(\r\n    G.reveal,\r\n    MenuRevealData(topText, content),\r\n    parseInt(ctx.playerID)\r\n  );\r\n  moveToArray(G.deck[ctx.playerID].cards, G.hand[ctx.playerID], index);\r\n};\r\n\r\nconst searchToDZ = (G, ctx, index) => {\r\n  moveToArray(G.deck[ctx.playerID].cards, G.destroyZone[ctx.playerID], index);\r\n};\r\n\r\nconst searchToOOG = (G, ctx, index) => {\r\n  moveToArray(G.deck[ctx.playerID].cards, G.out, index);\r\n};\r\n\r\nconst shuffleDeck = (G, ctx) => {\r\n  G.deck[ctx.playerID].cards = ctx.random.Shuffle(G.deck[ctx.playerID].cards);\r\n};\r\n\r\nconst mill = (G, ctx, number) => {\r\n  let count = number || 1;\r\n  for (let i = 0; i < count; i++) {\r\n    let draw = G.deck[ctx.playerID].cards.pop();\r\n    G.destroyZone[ctx.playerID].push(draw);\r\n  }\r\n};\r\n\r\nexport const DeckActions = {\r\n  setDeck,\r\n  draw,\r\n  drawForTurn,\r\n  searchToHand,\r\n  searchToDZ,\r\n  searchToOOG,\r\n  shuffleDeck,\r\n  mill,\r\n};\r\n\r\nexport default DeckActions;\r\n","import { moveToArray } from \"../../utils/help\";\r\n\r\nconst backToHand = (G, ctx, index) => {\r\n  moveToArray(G.destroyZone[ctx.playerID], G.hand[ctx.playerID], index);\r\n};\r\n\r\nconst destroyToOOG = (G, ctx, index) => {\r\n  moveToArray(G.destroyZone[ctx.playerID], G.out, index);\r\n};\r\n\r\nconst DestroyActions = {\r\n  backToHand,\r\n  destroyToOOG,\r\n};\r\n\r\nexport default DestroyActions;\r\n","import { moveToArray } from \"../../utils/help\";\r\n\r\nconst recycle = (G, ctx, index) => {\r\n  let placeID = G.out[index].controller;\r\n  moveToArray(G.out, G.destroyZone[placeID], index);\r\n};\r\n\r\nconst OutActions = {\r\n  recycle,\r\n};\r\n\r\nexport default OutActions;\r\n","const ImageData = (ref, title) => {\r\n  let obj = {\r\n    ref: ref,\r\n    title: title,\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport default ImageData;\r\n","import { pushToReveal } from \"../../utils/menu\";\r\nimport ImageData from \"../../models/image-data\";\r\nimport MenuRevealData from \"../../models/menu-reveal\";\r\n\r\nconst clearReveal = (G, ctx) => {\r\n  G.reveal[ctx.playerID].shift();\r\n};\r\n\r\nconst setLife = (G, ctx, lp) => {\r\n  G.life[ctx.playerID] = lp;\r\n};\r\n\r\nconst callReact = (G, ctx, image) => {\r\n  let content = ImageData(image, \"REACT!\");\r\n  let topText = \"Your opponent wants to\";\r\n  G.reveal = pushToReveal(\r\n    G.reveal,\r\n    MenuRevealData(topText, content),\r\n    parseInt(ctx.playerID)\r\n  );\r\n};\r\n\r\nconst MiscActions = {\r\n  clearReveal,\r\n  setLife,\r\n  callReact,\r\n};\r\n\r\nexport default MiscActions;\r\n","import { ActivePlayers, TurnOrder } from \"boardgame.io/core\";\r\nimport { setupDeck, setupProps, setupBoard } from \"./Server/actions/setup\";\r\nimport Consts from \"./utils/consts\";\r\nimport HideSecrets from \"./utils/secret\";\r\nimport BoardActions from \"./Server/actions/board\";\r\nimport HandActions from \"./Server/actions/hand\";\r\nimport DeckActions from \"./Server/actions/deck\";\r\nimport DestroyActions from \"./Server/actions/destroy\";\r\nimport OutActions from \"./Server/actions/out\";\r\nimport MiscActions from \"./Server/actions/controls\";\r\n\r\nexport const Simulator = {\r\n  name: \"dominion_simulator\",\r\n  setup: (ctx, setupData) => ({\r\n    deck: setupDeck(ctx, setupData),\r\n    hand: setupProps(ctx.numPlayers, []),\r\n    destroyZone: setupProps(ctx.numPlayers, []),\r\n    out: [],\r\n    life: [Consts.maxLife, Consts.maxLife],\r\n    reveal: setupProps(ctx.numPlayers, []),\r\n    board: setupBoard(Consts.board),\r\n  }),\r\n\r\n  moves: {\r\n    ...DeckActions,\r\n    ...HandActions,\r\n    ...DestroyActions,\r\n    ...OutActions,\r\n    ...BoardActions,\r\n    ...MiscActions,\r\n  },\r\n\r\n  minPlayers: 2,\r\n  maxPlayers: 2,\r\n\r\n  turn: {\r\n    order: TurnOrder.DEFAULT,\r\n    activePlayers: ActivePlayers.ALL,\r\n  },\r\n\r\n  playerView: HideSecrets,\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:8000\",\r\n});\r\n\r\nexport const getDeckService = async (deckID) => {\r\n  const response = await api.get(`deck/${deckID}/cards`);\r\n  return response.data;\r\n};\r\n\r\nexport default api;\r\n","const MenuData = (posX, posY, actions) => {\r\n  let obj = {\r\n    posX: posX,\r\n    posY: posY,\r\n    actions: actions,\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport default MenuData;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { doWhenClickOutside } from \"../../../../utils/menu\";\r\nimport \"../../styles/menu.css\";\r\n\r\nconst Menu = ({items, moves, clear, posX, posY}) => {\r\n    const clickRef = React.useRef(null);\r\n    const isMouseUpTheCenter = window.innerHeight / 2 > posY\r\n    const style = isMouseUpTheCenter ? {\r\n        left: posX,\r\n        top: posY\r\n    } : {\r\n        left: posX,\r\n        bottom: window.innerHeight-posY \r\n    }\r\n\r\n    React.useEffect(() => doWhenClickOutside(clickRef, clear),[clickRef, clear]);\r\n    \r\n    let menuClick = (item) => {\r\n        moves[item.event].apply(this, item.args);\r\n        clear();\r\n    };\r\n\r\n    return(\r\n        <div className=\"menu\" \r\n        style={style} \r\n        ref={clickRef}>\r\n            {items.map((item, index) => (\r\n            <div className=\"menu-item\" onClick={() => menuClick(item)} key={index}>{item.name}</div>\r\n        ))}\r\n        </div>\r\n)}\r\n\r\nMenu.propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.object),\r\n    moves: PropTypes.object,\r\n    clear: PropTypes.func,\r\n    posX: PropTypes.number,\r\n    posY: PropTypes.number\r\n}\r\n\r\nexport default Menu;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CardArt = ({card, reveal}) => (\r\n    card && reveal && card.art &&\r\n        <img src={`${window.location.origin}/img/${card.art}`} alt={card.name} />\r\n);\r\n\r\nCardArt.propTypes = {\r\n    card: PropTypes.object, \r\n    reveal: PropTypes.bool\r\n}\r\n\r\nCardArt.defaultProps = {\r\n    card: {}, \r\n    reveal: true\r\n}\r\n\r\nexport default CardArt;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport CardArt from \"./card-art\";\r\nimport { orNothing } from \"utils/help\";\r\nimport \"Client/ui/styles/card.css\";\r\n\r\nconst Card = ({card, highlight, extraClass, click, children}) => {\r\n\r\n    const selectCard = () => {\r\n        if(highlight && card){\r\n            highlight(card)\r\n        }\r\n    }\r\n\r\n    const checkAndRender = () => {\r\n        if(card){\r\n            let reveal = typeof card.flipped !== 'undefined' ? !card.flipped : false;\r\n            return <CardArt card={card} reveal={reveal}/>\r\n        }\r\n    }\r\n\r\n    return(\r\n    <div className={`hoverable card-holder `+orNothing(extraClass)} \r\n    onClick={click}\r\n    onMouseEnter={(e) => selectCard()}>\r\n        {checkAndRender()}\r\n        {children}\r\n    </div>\r\n)}\r\n\r\nCard.propTypes = {\r\n    card: PropTypes.object, \r\n    highlight: PropTypes.func, \r\n    extraClass: PropTypes.string, \r\n    click: PropTypes.func, \r\n    children: PropTypes.node\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { orNothing } from \"../../../../utils/help\";\r\nimport \"../../styles/button.css\";\r\n\r\nconst Button = ({click, extraClass, hidden, children}) => {\r\n    const isHidden = () => {\r\n        return hidden ? \" hidden\": \"\";\r\n    }\r\n\r\n    return(\r\n    <button className={\"hoverable button\"\r\n    +orNothing(extraClass)\r\n    +isHidden()} \r\n    onClick={click}>\r\n        {children}\r\n    </button>\r\n)}\r\n\r\nButton.propTypes = {\r\n    click: PropTypes.func, \r\n    extraClass: PropTypes.string, \r\n    hidden: PropTypes.bool, \r\n    children: PropTypes.node\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Button from \"../general/button\";\r\nimport \"../../styles/menu-header.css\"\r\n\r\nconst MenuHeader = ({header, clear}) => (\r\n    <div className=\"header\">\r\n        {header}\r\n        <Button extraClass=\" quit\"\r\n        click={clear}\r\n        >X</Button>\r\n    </div>\r\n);\r\n\r\nMenuHeader.propTypes = {\r\n    header: PropTypes.string,\r\n    clear: PropTypes.func\r\n}\r\n\r\nexport default MenuHeader;\r\n","const Strings = {\r\n  deckHeader: \"My Deck\",\r\n  myDZHeader: \"My Destroyed Cards\",\r\n  rivalDZHeader: \"Rival's Destroyed Cards\",\r\n  oogHeader: \"Out Of Game Cards\",\r\n  boardHeader: \"Board Tile\",\r\n};\r\n\r\nexport default Strings;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Card from \"../card/card\";\r\nimport MenuHeader from \"./menu-header\";\r\nimport Strings from \"../../../../utils/strings\";\r\nimport { doWhenClickOutside } from \"../../../../utils/menu\";\r\nimport \"../../styles/menu-list.css\";\r\n\r\n\r\nconst MenuList = ({menu, ids, click, highlight, clear}) => {\r\n    const clickRef = React.useRef(null);\r\n\r\n    const getExtraCardClass = (card) => {\r\n        if(menu.header === Strings.oogHeader){\r\n            return card.controller === ids[0] ? \" user-border\" : \" rival-border\";\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    React.useEffect(() => {doWhenClickOutside(clickRef, clear)}\r\n    ,[clickRef, clear]);\r\n\r\n    return(\r\n        <div className=\"menu-list-container\"  \r\n        ref={clickRef}>\r\n            <MenuHeader \r\n            header={menu.header} \r\n            clear={clear} \r\n            />\r\n            <div className=\"menu-list\">\r\n                {menu.cards.map((card, index) => (\r\n                <Card\r\n                extraClass={getExtraCardClass(card)} \r\n                click={(e) => click(e, index)}\r\n                card={card}\r\n                highlight={highlight} \r\n                key={index}/>\r\n            ))}\r\n            </div>\r\n        </div>\r\n)}\r\n\r\nMenuList.propTypes = {\r\n    menu: PropTypes.object,\r\n    ids: PropTypes.arrayOf(PropTypes.number),\r\n    click: PropTypes.func,\r\n    highlight: PropTypes.func,\r\n    clear: PropTypes.func\r\n}\r\n\r\nexport default MenuList;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Button from \"./button\";\r\nimport { numberOrZero } from \"../../../../utils/help\";\r\nimport \"../../styles/number-input.css\";\r\n\r\nconst NumberInput = ({value, setValue}) => (\r\n    <div className=\"input-container\">\r\n        <Button \r\n            extraClass=\" success\"\r\n            click={()=> setValue(value+1)}>+</Button>\r\n        <input \r\n        type=\"number\" \r\n        value={value} \r\n        onChange={e => setValue(numberOrZero(parseInt(e.target.value)))}/>\r\n        <Button \r\n            extraClass=\" quit\"\r\n            click={()=> setValue(value-1)}>-</Button>\r\n    </div>\r\n)\r\n\r\nNumberInput.propTypes = {\r\n    value: PropTypes.number,\r\n    setValue: PropTypes.func\r\n}\r\n\r\nexport default NumberInput;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Button from \"../general/button\";\r\nimport { doWhenClickOutside } from \"../../../../utils/menu\";\r\nimport NumberInput from \"../general/number-input\";\r\nimport \"../../styles/menu-life.css\";\r\n\r\nconst MenuLife = ({life, apply, clear}) => {\r\n    const clickRef = React.useRef(null);\r\n    const [lifePoints, setLifePoints] = React.useState(life);\r\n\r\n    React.useEffect(() => doWhenClickOutside(clickRef, clear)\r\n    ,[clickRef, clear]);\r\n\r\n    const applyLifePoints = () => {\r\n        apply(lifePoints)\r\n        clear()\r\n    }\r\n\r\n    return(\r\n        <div className=\"menu-life-container\"  \r\n        ref={clickRef}>\r\n            <p>Set Your Life Points:</p>\r\n            <NumberInput value={lifePoints} setValue={setLifePoints} />\r\n            <Button click={()=> applyLifePoints()}>Apply</Button>\r\n        </div>\r\n)}\r\n\r\nMenuLife.propTypes = {\r\n    life: PropTypes.number, \r\n    apply: PropTypes.func, \r\n    clear: PropTypes.func\r\n}\r\n\r\nexport default MenuLife;","export default __webpack_public_path__ + \"static/media/swords.4f99b115.png\";","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"../../styles/no-input-layer.css\";\r\n\r\nconst NoInputLayer = ({children}) => (\r\n        <div className=\"no-input\">  \r\n            {children}\r\n        </div>\r\n)\r\n\r\nNoInputLayer.propTypes = {\r\n    children: PropTypes.node\r\n}\r\n\r\nexport default NoInputLayer;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Button from \"../general/button\"\r\nimport Card from \"../card/card\";\r\nimport VersusIcon from \"Client/ui/images/swords.png\";\r\nimport NoInputLayer from \"../general/no-input-layer\";\r\nimport \"../../styles/menu-reveal.css\";\r\n\r\n\r\nconst MenuReveal = ({menu, highlight, clear}) => {\r\n\r\n    const getContent = () => {\r\n        let content = menu.content;\r\n        if(content.hasOwnProperty(\"id\")){\r\n            return (<Card highlight={highlight} card={content}/>)\r\n        } else if(content.hasOwnProperty(\"ref\")){\r\n            return (<img src={content.ref} alt={content.title}/>)\r\n        } else if(content.hasOwnProperty(\"attacker\")){\r\n            return(\r\n                <React.Fragment>\r\n                    <Card highlight={highlight} card={content.attacker}/>\r\n                    <img src={VersusIcon} alt={\"Versus Icon\"}/>\r\n                    <Card highlight={highlight} card={content.attacked}/>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    };\r\n\r\n    return(\r\n        <NoInputLayer>\r\n            <div className=\"menu-reveal\">\r\n                <div className=\"reveal-text\">\r\n                    {menu.topText}\r\n                </div>\r\n                <div className=\"reveal-content\">\r\n                    {getContent()}\r\n                </div>\r\n                <div className=\"reveal-text\">\r\n                    {menu.bottomText}\r\n                </div>\r\n                <Button click={clear}>OK</Button>\r\n            </div>\r\n        </NoInputLayer>\r\n)}\r\n\r\nMenuReveal.propTypes = {\r\n    menu: PropTypes.object,\r\n    highlight: PropTypes.func,\r\n    clear: PropTypes.func\r\n}\r\n\r\nexport default MenuReveal;","import { Types } from \"models/enums\";\r\nimport React from \"react\";\r\nimport NumberInput from \"../general/number-input\";\r\nimport Button from \"../general/button\";\r\nimport MenuHeader from \"./menu-header\";\r\nimport CardArt from \"../card/card-art\";\r\nimport { getCurentATK, getCurentHP, getCurrentRange, setStats } from \"utils/card\";\r\nimport \"../../styles/menu-stats.css\"\r\nimport NoInputLayer from \"../general/no-input-layer\";\r\n\r\nconst MenuStats = ({data, highlight, apply, clear}) => {\r\n\r\n    const {place, card, index} = data;\r\n    const cardName = card.type !== Types.TOKEN ? card.title : Types.TOKEN\r\n    const [atk, setCardAtk] = React.useState(getCurentATK(card));\r\n    const [hp, setCardHP] = React.useState(getCurentHP(card));\r\n    const [range, setCardRange] = React.useState(getCurrentRange(card));\r\n    const [isRangeEnable, setIsRangeEnable] = React.useState(getCurrentRange(card) !== 0);\r\n\r\n    const rangeCheck = (e) => {\r\n        setIsRangeEnable(e.target.checked)\r\n    }\r\n\r\n    const applyStats = () => {\r\n        let getRange = isRangeEnable ? range : getCurrentRange(card)\r\n        let stats = {atk, hp, range:getRange};\r\n        apply(place, stats, index);\r\n        highlight(setStats(card, stats));\r\n        clear();\r\n    }\r\n\r\n    return(\r\n        <NoInputLayer>\r\n            <div className=\"menu-stats-container\">\r\n                <MenuHeader header={`${cardName} Status`} clear={clear}/>\r\n                <div className=\"menu-stats\">\r\n                    <div className=\"column\">\r\n                        <CardArt card={card}/>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <h3>Atack:</h3>\r\n                        <NumberInput value={atk} setValue={setCardAtk}/>\r\n                        <h3>Life:</h3>\r\n                        <NumberInput value={hp} setValue={setCardHP}/>\r\n                        <div className=\"input-container\">\r\n                            <input type=\"checkbox\" checked={isRangeEnable} onChange={e => rangeCheck(e)}/><p>Set Card Range</p>\r\n                        </div> \r\n                        { isRangeEnable &&\r\n                            <React.Fragment>\r\n                                <h3>Range:</h3>\r\n                                <NumberInput value={range} setValue={setCardRange}/>\r\n                            </React.Fragment>\r\n                        }     \r\n                    </div>\r\n                </div>\r\n                <Button click={()=> applyStats()}>Apply</Button>\r\n            </div>\r\n        </NoInputLayer>\r\n    )\r\n}\r\n\r\nexport default MenuStats;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport MenuData from \"../../../../models/menu\";\r\nimport Menu from \"../menus/menu\";\r\nimport MenuList from \"../menus/menu-list\"\r\nimport MenuLife from \"../menus/menu-life\";\r\nimport MenuReveal from \"../menus/menu-reveal\";\r\nimport \"../../styles/menu-layer.css\";\r\nimport MenuStats from \"../menus/menu-stats\";\r\n\r\nconst MenuLayer = ({listMenu, actionMenu, revealMenu, statsMenu, lifeMenu, ids, moves, highlight, clear}) => {\r\n\r\n    const clickMenuList = (event, index) => {\r\n        let actions = listMenu.actions.map(action => {\r\n            let args = [index];\r\n            if(Array.isArray(action.args)) {\r\n                action.args.push(...args);\r\n            } else {\r\n                action.args = args;\r\n            }\r\n            \r\n            return action\r\n        });\r\n        let menu = MenuData(event.pageX, event.pageY, actions);\r\n        \r\n        moves.actionsMenu(menu);\r\n    }\r\n    \r\n    return(\r\n        <div className=\"menu-layer\"> \r\n        {actionMenu && \r\n        actionMenu.actions.length > 0 &&\r\n            <Menu items={actionMenu.actions}  \r\n            moves={moves} \r\n            posX={actionMenu.posX}\r\n            posY={actionMenu.posY}\r\n            clear={clear}/>}\r\n        {listMenu &&  \r\n        listMenu.cards.length > 0 &&\r\n            <MenuList menu={listMenu}\r\n            ids={ids}\r\n            highlight={highlight}\r\n            moves={moves}\r\n            click={clickMenuList}\r\n            clear={clear}/>}\r\n        {statsMenu &&\r\n            <MenuStats\r\n            data={statsMenu}\r\n            highlight={highlight}\r\n            apply={moves.applyStats} \r\n            clear={clear}/>\r\n        }\r\n        {lifeMenu &&\r\n            <MenuLife\r\n            life={lifeMenu.life}\r\n            clear={clear}\r\n            apply={(lp) => moves.setLife(lp)}/>}\r\n        {revealMenu.length > 0 && \r\n            <MenuReveal\r\n            highlight={highlight} \r\n            menu={revealMenu[0]}\r\n            clear={clear}/>}\r\n        </div>\r\n)};\r\n\r\nMenuLayer.propTypes = {\r\n    listMenu: PropTypes.object, \r\n    actionMenu: PropTypes.object, \r\n    revealMenu: PropTypes.arrayOf(PropTypes.object), \r\n    lifeMenu: PropTypes.object, \r\n    ids: PropTypes.arrayOf(PropTypes.number), \r\n    moves: PropTypes.object, \r\n    highlight: PropTypes.func, \r\n    clear: PropTypes.func\r\n}\r\n\r\nexport default MenuLayer;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { orNothing } from \"../../../../utils/help\";\r\nimport \"../../styles/jar.css\";\r\n\r\nconst Jar = ({click, extraClass, children}) => (\r\n    <div \r\n    className={\"hoverable jar \"+orNothing(extraClass)} \r\n    onClick={click}>\r\n        {children}\r\n        </div>\r\n)\r\n\r\nJar.propTypes = {\r\n    click: PropTypes.func, \r\n    extraClass: PropTypes.string, \r\n    children: PropTypes.node\r\n}\r\n\r\nexport default Jar;","export const ClassNames = {\r\n  DISABLED: \"disabled\",\r\n  NO_COVER: \"no-cover\",\r\n  SELECTED: \"selected\",\r\n  INVERTED: \"inverted\",\r\n};\r\n\r\nexport const getExtraClasses = (condition, className) => {\r\n  if (Array.isArray(condition) && Array.isArray(className)) {\r\n    let extraClassName = \"\";\r\n    condition.forEach((cond, index) => {\r\n      if (cond) {\r\n        extraClassName += className[index];\r\n      }\r\n      extraClassName += condition[index + 1] ? \" \" : \"\";\r\n    });\r\n    return extraClassName;\r\n  } else {\r\n    return condition ? className : \"\";\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Card from \"../card/card\"\r\nimport Jar from \"../gameplay/jar\"\r\nimport { Origin } from \"../../../../models/enums\";\r\nimport { ClassNames, getExtraClasses } from \"../../../../utils/style-class\";\r\nimport { isEmpty } from \"../../../../utils/help\";\r\n\r\nconst DeckColumn = ({ids, decks, dzs, out, menu, selection}) => {\r\n\r\n    const [myID, rivalID] = ids;\r\n    const [myDeck, rivalDeck] = [decks[myID], decks[rivalID]];\r\n    const [myDZ, rivalDZ] = [dzs[myID], dzs[rivalID]];\r\n    const isSelected = selection; \r\n    const [deckMenu, dzMenu, oogMenu] = menu;\r\n\r\n\r\n    const checkDeck = (e) => {\r\n        if(myDeck.cards.length > 0){\r\n            deckMenu(e);\r\n        }\r\n    };\r\n\r\n    return(\r\n    <div className=\"deck-col\">\r\n            <Card extraClass={\"disabled \" + \r\n            getExtraClasses(isEmpty(rivalDeck.cards), ClassNames.NO_COVER)}>\r\n                <div className=\"counter\">{rivalDeck.cards.length}</div>\r\n            </Card>\r\n            <Card\r\n            card={rivalDZ.at(-1)}\r\n            extraClass={\r\n                getExtraClasses([isEmpty(rivalDZ), isEmpty(rivalDZ), !isEmpty(rivalDZ)], \r\n                [ClassNames.DISABLED ,ClassNames.NO_COVER , ClassNames.INVERTED])\r\n            } \r\n            click={() => dzMenu(rivalID, false)}>\r\n                <div className=\"counter\">{rivalDZ.length}</div>\r\n            </Card>\r\n            <Jar\r\n            extraClass={\r\n                getExtraClasses(isEmpty(out), ClassNames.DISABLED)\r\n            }\r\n            click={() => oogMenu()}>OUT</Jar>\r\n            <Card\r\n            card={myDZ.at(-1)} \r\n            extraClass={\r\n                getExtraClasses([isSelected(Origin.DZ), isEmpty(myDZ), isEmpty(myDZ)],\r\n                 [ClassNames.SELECTED, ClassNames.DISABLED, ClassNames.NO_COVER])\r\n            } \r\n            click={() => dzMenu(myID, true)}>\r\n                 <div className=\"counter\">{myDZ.length}</div>\r\n            </Card>\r\n            <Card\r\n            extraClass={\r\n                getExtraClasses([isEmpty(myDeck.cards), isEmpty(myDeck.cards)],\r\n                 [ClassNames.DISABLED, ClassNames.NO_COVER])\r\n            } \r\n            click={(e) => checkDeck(e)}>\r\n                <div className=\"counter\">{myDeck.cards.length}</div>\r\n            </Card>\r\n        </div>\r\n)}\r\n\r\nDeckColumn.propTypes = {\r\n    ids: PropTypes.arrayOf(PropTypes.number), \r\n    decks: PropTypes.arrayOf(PropTypes.object), \r\n    dzs: PropTypes.arrayOf(PropTypes.array), \r\n    out: PropTypes.array, \r\n    menu: PropTypes.arrayOf(PropTypes.func), \r\n    selection: PropTypes.func\r\n}\r\n\r\nexport default DeckColumn;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Card from \"../card/card\";\r\nimport { Origin } from \"../../../../models/enums\";\r\nimport \"../../styles/hand.css\";\r\n\r\nconst Hand = ({list, selected, menuClick, highlight}) => {\r\n    const handMenu = (e, i) => {\r\n        if(menuClick){\r\n            menuClick(e, i);\r\n        }\r\n    }\r\n\r\n    const isSelected = (index) => {\r\n        if(selected){\r\n            let thisSelection = selected.origin[Origin.HAND]\r\n            if(thisSelection === index){\r\n                return \" selected\";\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    return(\r\n    <div className=\"hand\">\r\n        {list.map((card, index) => (\r\n        <Card key={index}\r\n        card={card}\r\n        highlight={highlight}\r\n        extraClass={isSelected(index)} \r\n        click={(e) => handMenu(e, index)}/>\r\n    ))}</div>\r\n)}\r\n\r\nHand.propTypes = {\r\n    list: PropTypes.arrayOf(PropTypes.object), \r\n    selected: PropTypes.object, \r\n    menuClick: PropTypes.func, \r\n    highlight: PropTypes.func\r\n}\r\n\r\nexport default Hand;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Card from \"../card/card\";\r\nimport { SelectTypes, Types } from \"../../../../models/enums\";\r\nimport { ClassNames, getExtraClasses } from \"../../../../utils/style-class\";\r\nimport { getTileCard, isFieldOnTile } from \"utils/board\";\r\nimport { getCurentHP, getCurentATK, getCurrentRange } from \"../../../../utils/card\";\r\nimport \"../../styles/board.css\";\r\nimport Place from \"models/place\";\r\n\r\n\r\n\r\nconst Board = ({board, ids, moves, selected, life, menuClick, highlight, clear}) => {\r\n\r\n    const [myID, rivalID] = ids\r\n    const dominionIds = myID === 1 ? [4, 3]: [3, 4];\r\n\r\n    const isInversed = (card) => (card.controller !== myID) !== card.inversed\r\n\r\n    const renderTile = (tile, i, j) => {\r\n        let id = i+\"-\"+j\r\n        let typeName = getClassName(tile)\r\n        return(<div \r\n        className={typeName+\" tile-holder\"}\r\n         key={id}>\r\n             {getContent(tile)}\r\n             </div>);\r\n    }\r\n\r\n    const getClassName = (tile) =>{\r\n        if(tile){\r\n            switch(tile.spawn){\r\n                case myID+1:\r\n                    return \"hoverable user\";\r\n                case rivalID+1:\r\n                    return \"hoverable rival\";\r\n                case dominionIds[0]:\r\n                    return \"dominion user\";\r\n                case dominionIds[1]:\r\n                    return \"dominion rival\";\r\n                default:\r\n                    return \"hoverable\";\r\n            }\r\n        } else {\r\n            return \"\";\r\n        }\r\n        \r\n    }\r\n\r\n    const getContent = (tile) =>{\r\n        if(tile){\r\n            let extraClass = selected ? \" selected\" : \"\";\r\n            if(tile.spawn === 3  || tile.spawn === 4){\r\n                return getLifeTile(tile.spawn);\r\n            } else {\r\n                return (<div className={\"content\"+extraClass}\r\n                 onClick={() => clickSpawnTile(tile.originalX, tile.originalY)}>\r\n                    {getCardView(tile.cards[0], tile)}\r\n                </div>)\r\n            }\r\n        } else {\r\n            return \"\";\r\n        }\r\n        \r\n    }\r\n\r\n    const getLifeTile = (spawn) => {\r\n        if(spawn === dominionIds[0]){\r\n            return(<div className=\"content\" \r\n            onClick={()=> moves.myLifeMenu()}>\r\n            {life[myID]}\r\n            </div>);\r\n        } else if(spawn === dominionIds[1]){\r\n            return(<div className=\"content\">\r\n            {life[rivalID]}\r\n            </div>);\r\n        }\r\n    }\r\n\r\n    const clickSpawnTile = (x, y) => {\r\n        if(selected){\r\n            switch(selected.type){\r\n                case SelectTypes.TO_BOARD:\r\n                    moves.placeInHere(selected, x,y);\r\n                    break;\r\n                case SelectTypes.TO_ATTACK:\r\n                    let card = getTileCard(board, Place(x, y), 0);\r\n                    if(card){\r\n                        moves.attackCard(selected, card)\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            clear();\r\n        }\r\n    }\r\n\r\n    const clickCardTile = (e, tile) => {\r\n        if(!selected){\r\n            menuClick(e, tile, myID)\r\n        }\r\n    }\r\n\r\n    const getCardView = (card, tile) => {\r\n        if(card){\r\n            let extraClass = getExtraClasses(isInversed(card), ClassNames.INVERTED) \r\n\r\n            return (\r\n            <Card card={card}\r\n                highlight={highlight}\r\n                extraClass={extraClass+\" \"+ClassNames.DISABLED}\r\n                click={(e) => clickCardTile(e, tile)} >\r\n                <div className=\"overlay\">\r\n                    {renderOverlay(card, tile)}\r\n                </div> \r\n            </Card>)\t\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    const renderOverlay = (card, tile) => {\r\n        return( \r\n            <React.Fragment>\r\n            {renderInfo(tile)}\r\n            {renderStats(card)}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const renderInfo = (tile) => {\r\n        let cards = tile.cards\r\n        let field = isFieldOnTile(cards);\r\n        if(cards.length > 1){\r\n            return(\r\n                <React.Fragment>\r\n                    <div className=\"top-right txt-info\" \r\n                    onClick={(e) => clickPlus(e, tile)}>\r\n                        +\r\n                    </div>\r\n                    {field && \r\n                        <div className=\"top-left txt-info\"\r\n                        onMouseEnter={() => highlight(field)}\r\n                        onMouseLeave={() => highlight(cards[0])}>\r\n                            F\r\n                        </div>\r\n                    }\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    const clickPlus = (e, tile) => {\r\n        moves.getTileCardsList(tile)\r\n        e.stopPropagation();\r\n    }\r\n\r\n    const renderStats = (card) => {\r\n        if(!card.flipped && card.type === Types.UNITY){\r\n            return (\r\n                <div className=\"bottom\">\r\n                    <div className=\"txt-info\">\r\n                        {getCurentATK(card)+\"/\"+getCurentHP(card)}\r\n                    </div>\r\n                    <div className=\"txt-info\">\r\n                        {renderRange(card)}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const renderRange = (card) => {\r\n        if(getCurrentRange(card) !== 0){\r\n            return getCurrentRange(card) > 0 ? \"+\" : \"\" +getCurrentRange(card)\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n       return(\r\n        <div className=\"board\">\r\n            {board.map((row, i) => (\r\n                row.map((tile, j) => renderTile(tile, i, j))\r\n        ))}\r\n        </div>\r\n)}\r\n\r\nBoard.propTypes = {\r\n    board: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.object)), \r\n    ids: PropTypes.arrayOf(PropTypes.number),\r\n    moves: PropTypes.object, \r\n    selected: PropTypes.object, \r\n    life: PropTypes.arrayOf(PropTypes.number), \r\n    menuClick: PropTypes.func, \r\n    highlight: PropTypes.func, \r\n    clear: PropTypes.func\r\n}\r\n\r\nexport default Board;","import React from \"react\"\r\nimport PropTypes from 'prop-types';\r\nimport Hand from \"../gameplay/hand\";\r\nimport Board from \"../gameplay/board\";\r\nimport { renderBoard } from \"../../../../utils/board\";\r\n\r\nconst HandColumn = ({ids, hand, board, life, moves, actions}) => {\r\n\r\n    const [myID, rivalID] = ids;\r\n    const [myHand, rivalHand] = [hand[myID], hand[rivalID]];\r\n    const [handMenu,\r\n        boardMenu,\r\n        selectToBoard,\r\n        clearSelectionCallback,\r\n        setHighlightCard] = actions;\r\n\r\n    return(\r\n        <div className=\"hand-col\">\r\n            <Hand \r\n            reveal={false}\r\n            list={rivalHand}/>\r\n            <Board \r\n            board={renderBoard(board, myID)} \r\n            menuClick={boardMenu}\r\n            ids={[myID, rivalID]}\r\n            life={life} \r\n            selected={selectToBoard}\r\n            moves={moves}\r\n            highlight={setHighlightCard}\r\n            clear={clearSelectionCallback}/>\r\n            <Hand \r\n            reveal={true}\r\n            list={myHand} \r\n            menuClick={handMenu}\r\n            highlight={setHighlightCard}\r\n            selected={selectToBoard}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nHand.propTypes = {\r\n    ids: PropTypes.arrayOf(PropTypes.number), \r\n    hand: PropTypes.arrayOf(PropTypes.object), \r\n    board: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)), \r\n    life: PropTypes.arrayOf(PropTypes.number), \r\n    moves: PropTypes.object, \r\n    actions: PropTypes.object\r\n}\r\n\r\nexport default HandColumn;","export default __webpack_public_path__ + \"static/media/react-img.a3ca1abf.png\";","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Button from \"../general/button\";\r\nimport ReactImage from \"../../images/react-img.png\";\r\n\r\nconst ControlColumn = ({ids, currentPlayer, reveal, moves, events}) => {\r\n\r\n    const [myID, rivalID] = ids;\r\n\r\n    const endMyTurn = () => {\r\n        if(currentPlayer === myID){\r\n            events.endTurn()\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"control-col\">\r\n                <Button click={() => moves.callReact(ReactImage)}\r\n                hidden={reveal[rivalID].length > 0 || \r\n                currentPlayer === myID}>\r\n                        REACT!\r\n                </Button>\r\n                <Button click={() => endMyTurn()}\r\n                hidden={currentPlayer !== myID}>\r\n                    END TURN\r\n                </Button>\r\n            </div>\r\n    )\r\n}\r\n\r\nControlColumn.propTypes = {\r\n    ids: PropTypes.arrayOf(PropTypes.number), \r\n    currentPlayer: PropTypes.number, \r\n    reveal: PropTypes.arrayOf(PropTypes.array), \r\n    moves: PropTypes.object, \r\n    events: PropTypes.object\r\n}\r\n\r\nexport default ControlColumn;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../../styles/status-segment.css\";\r\n\r\nconst StatusSegment = ({children}) => (\r\n    <div className=\"segment\">\r\n        {children}\r\n    </div>\r\n)\r\n\r\nStatusSegment.propTypes = {\r\n    children: PropTypes.node\r\n}\r\n\r\nexport default StatusSegment;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport HtmlParser from \"react-html-parser\";\r\nimport { Types } from \"../../../../models/enums\";\r\nimport { getCurentATK, getCurentHP, getCurrentRange } from \"../../../../utils/card\";\r\nimport CardArt from \"../card/card-art\";\r\nimport StatusSegment from \"../general/status-segment\"\r\n\r\nconst StatusColumn = ({card}) => {\r\n\r\n    const renderTags = (tags) => {\r\n        let result=\"\";\r\n        if(Array.isArray(tags)){\r\n            tags.forEach((tag, index) => {\r\n                result+=tag;\r\n                result+= tags[index+1] ? \" | \" : \"\";\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    const getStatClass = (originalStat, currentStat) => {\r\n        if(currentStat < originalStat){\r\n            return \"negative\";\r\n        } else if(currentStat > originalStat){\r\n            return \"positive\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    const renderStatus = () => {\r\n        const element = card.type === Types.UNITY ? \"ELEMENT:\" : \"ACTIVATION:\"\r\n        const currentATK = getCurentATK(card);\r\n        const currentHP = getCurentHP(card);\r\n        const currentRange = getCurrentRange(card);\r\n        return(card.type !== Types.FIELD && \r\n            <div className=\"status-segment\"> \r\n                <div className=\"stat\">\r\n                    <div>{element}</div>\r\n                    <div>{card.element}</div>\r\n                </div>\r\n                <div className=\"stat\">\r\n                    <div>ATK:</div>\r\n                    <div className={getStatClass(card.atk ,currentATK)}>\r\n                        {currentATK}\r\n                    </div>\r\n                </div>\r\n                <div className=\"stat\">\r\n                    <div>HP:</div>\r\n                    <div className={getStatClass(card.hp ,currentHP)}>\r\n                        {currentHP}\r\n                    </div>\r\n                </div>\r\n                {currentRange !== 0 &&\r\n                <div className=\"stat\">\r\n                    <div>R:</div>\r\n                    <div>{currentRange}</div>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className=\"status-col\">\r\n            {card.id &&\r\n            <div>\r\n                <StatusSegment>\r\n                    <div><h3>{card.title}</h3></div>\r\n                </StatusSegment>\r\n                <StatusSegment>\r\n                    <CardArt card={card} />\r\n                </StatusSegment>\r\n                <StatusSegment>\r\n                    {renderStatus()}  \r\n                </StatusSegment>\r\n                <StatusSegment>\r\n                    {HtmlParser(card.description)}\r\n                    <div>\r\n                        {renderTags(card.tags)}\r\n                    </div>\r\n                </StatusSegment>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nStatusColumn.propTypes = {\r\n    card: PropTypes.object\r\n}\r\n\r\nexport default StatusColumn;","const Action = (name, event, args) => {\r\n  let obj = {\r\n    name: name,\r\n    event: event,\r\n    args: args,\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport default Action;\r\n","const MenuListData = (header, cards, actions) => {\r\n  let obj = {\r\n    header: header,\r\n    cards: cards,\r\n    actions: actions,\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport default MenuListData;\r\n","import Deck from \"models/deck\";\r\nimport Action from \"models/action\";\r\nimport MenuListData from \"models/menu-list\";\r\nimport MenuData from \"models/menu\";\r\nimport Strings from \"utils/strings\";\r\nimport { mapToCard } from \"models/card\";\r\n\r\nexport const constructDeck = (deckID, cards, id) => {\r\n  let mappedCards = [];\r\n  cards.forEach((card) => {\r\n    mappedCards.push(...mapToCard(card, id));\r\n  });\r\n  return Deck(deckID, mappedCards);\r\n};\r\n\r\nconst getDeckForSearch = (deck) => {\r\n  let actions = [\r\n    Action(\"To Hand\", \"searchToHand\"),\r\n    Action(\"To DZ\", \"searchToDZ\"),\r\n    Action(\"To OOG\", \"searchToOOG\"),\r\n  ];\r\n  return MenuListData(Strings.deckHeader, deck, actions);\r\n};\r\n\r\nconst getDeckActionsOnMenu = (event) => {\r\n  let actions = [\r\n    Action(\"Draw\", \"draw\"),\r\n    Action(\"Draw For Turn\", \"drawForTurn\"),\r\n    Action(\"Search\", \"getDeckForSearch\"),\r\n    Action(\"Shuffle Deck\", \"shuffleDeck\"),\r\n    Action(\"Mill\", \"mill\"),\r\n  ];\r\n  return MenuData(event.pageX, event.pageY, actions);\r\n};\r\n\r\nconst DeckActions = {\r\n  constructDeck,\r\n  getDeckForSearch,\r\n  getDeckActionsOnMenu,\r\n};\r\n\r\nexport default DeckActions;\r\n","const MenuLifeData = (lp) => {\r\n  let obj = {\r\n    life: lp,\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport default MenuLifeData;\r\n","import { SelectTypes } from \"./enums\";\r\n\r\nconst Temp = (\r\n  origin,\r\n  card,\r\n  flipped = false,\r\n  x = 0,\r\n  y = 0,\r\n  type = SelectTypes.TO_BOARD\r\n) => {\r\n  let obj = {\r\n    origin: origin,\r\n    type: type,\r\n    card: card,\r\n    flipped: flipped,\r\n    x: x,\r\n    y: y,\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport default Temp;\r\n","import Action from \"models/action\";\r\nimport MenuData from \"models/menu\";\r\nimport { Origin } from \"models/enums\";\r\nimport Temp from \"models/temp-select\";\r\n\r\nconst spawnFaceUp = (hand, myID, index) => {\r\n  return selectToField(hand, myID, index, false);\r\n};\r\n\r\nconst spawnFaceDown = (hand, myID, index) => {\r\n  return selectToField(hand, myID, index, true);\r\n};\r\n\r\nconst selectToField = (hand, myID, index, flipped) => {\r\n  let origin = {};\r\n  origin[Origin.HAND] = index;\r\n  let card = hand[myID][index];\r\n  return Temp(origin, card, flipped);\r\n};\r\n\r\nconst getHandActionsOnMenu = (event, pos, hand, myID) => {\r\n  let actions = [\r\n    Action(\"Back to Top of the Deck\", \"backToTopDeck\", [pos]),\r\n    Action(\"Back to Bottom of the Deck\", \"backToBottomDeck\", [pos]),\r\n    Action(\"SPAWN Face-up\", \"spawnFaceUp\", [hand, myID, pos]),\r\n    Action(\"SPAWN Face-down\", \"spawnFaceDown\", [hand, myID, pos]),\r\n    Action(\"Destroy\", \"destroy\", [pos]),\r\n    Action(\"Put OUT OF GAME\", \"finish\", [pos]),\r\n  ];\r\n  return MenuData(event.pageX, event.pageY, actions);\r\n};\r\n\r\nconst HandActions = {\r\n  spawnFaceUp,\r\n  spawnFaceDown,\r\n  getHandActionsOnMenu,\r\n};\r\n\r\nexport default HandActions;\r\n","const MenuStatusData = (place, card, index) => {\r\n  let obj = {\r\n    place: place,\r\n    card: card,\r\n    index: index,\r\n  };\r\n\r\n  return obj;\r\n};\r\n\r\nexport default MenuStatusData;\r\n","import Action from \"models/action\";\r\nimport MenuData from \"models/menu\";\r\nimport Place from \"models/place\";\r\nimport Temp from \"models/temp-select\";\r\nimport MenuListData from \"models/menu-list\";\r\nimport Strings from \"utils/strings\";\r\nimport { Origin, SelectTypes, Types } from \"models/enums\";\r\nimport { getTileCard } from \"utils/board\";\r\nimport MenuStatusData from \"models/menu-stats\";\r\n\r\nconst select = (board, place, index, type) => {\r\n  let origin = {};\r\n  origin[Origin.BOARD] = index;\r\n  let card = getTileCard(board, place, index);\r\n  return Temp(origin, card, card.flipped, place.x, place.y, type);\r\n};\r\n\r\nconst moveInBoard = (board, place, index = 0) => {\r\n  return select(board, place, index, SelectTypes.TO_BOARD);\r\n};\r\n\r\nconst selectToAttack = (board, place, index = 0) => {\r\n  return select(board, place, index, SelectTypes.TO_ATTACK);\r\n};\r\n\r\nconst openStatsMenu = (board, place, index = 0) => {\r\n  let card = getTileCard(board, place, index);\r\n  return MenuStatusData(place, card, index);\r\n};\r\n\r\nconst BoardActionsMenu = (card, id, place) => {\r\n  return [\r\n    Action(\"Move\", \"moveInBoard\", [place]),\r\n    Action(\"Attack\", \"selectToAttack\", [place]),\r\n    Action(\"Flip\", \"flipCard\", [place]),\r\n    Action(\"Invert\", \"invertCard\", [place]),\r\n    Action(\"Activate\", \"activateCard\", [place]),\r\n    //Action(\"Tick\", ServerActions.tickCard.name),\r\n    Action(\"Bounce\", \"bounceCard\", [place]),\r\n    Action(\"Destroy\", \"destroyCard\", [place]),\r\n    Action(\"Finish\", \"finishCard\", [place]),\r\n  ];\r\n};\r\n\r\nconst getMultipleCardBoardActions = (tile, id) => {\r\n  //let card = tile.cards[0];\r\n  let place = Place(tile.originalX, tile.originalY);\r\n  let actions = [\r\n    Action(\"Check all Cards\", \"getTileCardsList\", [tile]),\r\n    Action(\"Put card in back\", \"tileCardToBack\", [place]),\r\n  ];\r\n  /*\r\n  if (card.controller === id) {\r\n    let extra = [\r\n      ,\r\n      //Action(\"Attach Card\", attachArtifact.name),\r\n    ];\r\n    actions.push(...extra);\r\n  }\r\n  */\r\n  return actions;\r\n};\r\n\r\nconst getCardTypeBasedActions = (card, id, place) => {\r\n  switch (card.type) {\r\n    case Types.UNITY:\r\n      return [Action(\"Set Stats\", \"openStatsMenu\", [place])];\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\nconst getBoardActionMenu = (event, tile, id) => {\r\n  let actions = [];\r\n  let place = Place(tile.originalX, tile.originalY);\r\n\r\n  if (tile.cards.length > 1) {\r\n    actions.push(...getMultipleCardBoardActions(tile, id));\r\n  }\r\n  if (tile.cards.length > 0) {\r\n    let card = tile.cards[0];\r\n    let canControl = card.controller === id || card.inversed;\r\n    if (canControl) {\r\n      actions.push(...getCardTypeBasedActions(card, id, place));\r\n      actions.push(...BoardActionsMenu(card, id, place));\r\n    }\r\n  }\r\n  return MenuData(event.pageX, event.pageY, actions);\r\n};\r\n\r\nconst getTileCardsList = (tile) => {\r\n  let place = Place(tile.originalX, tile.originalY);\r\n  let actions = [\r\n    Action(\"To Top\", \"tileCardToFront\", [place]),\r\n    Action(\"To Back\", \"tileCardToBack\", [place]),\r\n    Action(\"Set Stats\", \"openStatsMenu\", [place]),\r\n    Action(\"Attack\", \"selectToAttack\", [place]),\r\n    Action(\"Activate\", \"activateCard\", [place]),\r\n    //Action(\"Attach Card\", attachArtifact.name),\r\n    Action(\"Bounce\", \"bounceCard\", [place]),\r\n    Action(\"Destroy\", \"destroyCard\", [place]),\r\n    Action(\"Finish\", \"finishCard\", [place]),\r\n  ];\r\n  return MenuListData(Strings.boardHeader, tile.cards, actions);\r\n};\r\n\r\nconst BoardActions = {\r\n  moveInBoard,\r\n  openStatsMenu,\r\n  selectToAttack,\r\n  getBoardActionMenu,\r\n  getTileCardsList,\r\n};\r\n\r\nexport default BoardActions;\r\n","import Temp from \"models/temp-select\";\r\nimport { Origin } from \"models/enums\";\r\nimport Action from \"models/action\";\r\nimport MenuListData from \"models/menu-list\";\r\nimport Strings from \"utils/strings\";\r\n\r\nconst reborn = (dz, myID, index) => {\r\n  return selectToField(dz, myID, index);\r\n};\r\n\r\nconst selectToField = (dz, myID, index) => {\r\n  let origin = {};\r\n  origin[Origin.DZ] = index;\r\n  let card = dz[myID][index];\r\n  return Temp(origin, card);\r\n};\r\n\r\nconst getDZForSearch = (G, id, mine) => {\r\n  let header = mine ? Strings.myDZHeader : Strings.rivalDZHeader;\r\n  let actions = mine\r\n    ? [\r\n        Action(\"Reborn\", \"reborn\", [G.destroyZone, id]),\r\n        Action(\"To Hand\", \"backToHand\"),\r\n        Action(\"To OOG\", \"destroyToOOG\"),\r\n      ]\r\n    : [];\r\n  return MenuListData(header, G.destroyZone[id], actions);\r\n};\r\n\r\nconst DestroyActions = {\r\n  reborn,\r\n  getDZForSearch,\r\n};\r\n\r\nexport default DestroyActions;\r\n","import Action from \"models/action\";\r\nimport MenuListData from \"models/menu-list\";\r\nimport Strings from \"utils/strings\";\r\n\r\nconst getOOGForSearch = (out) => {\r\n  let actions = [Action(\"Recycle\", \"recycle\")];\r\n  return MenuListData(Strings.oogHeader, out, actions);\r\n};\r\n\r\nconst OutActions = {\r\n  getOOGForSearch,\r\n};\r\n\r\nexport default OutActions;\r\n","import MenuLifeData from \"models/menu-life\";\r\nimport DeckActions from \"Client/actions/deck\";\r\nimport HandActions from \"Client/actions/hand\";\r\nimport BoardActions from \"Client/actions/board\";\r\nimport DestroyActions from \"Client/actions/destroy\";\r\nimport OutActions from \"Client/actions/out\";\r\nimport Strings from \"utils/strings\";\r\n\r\nconst { getDeckActionsOnMenu } = DeckActions;\r\nconst { getDZForSearch } = DestroyActions;\r\nconst { getOOGForSearch } = OutActions;\r\nconst { getHandActionsOnMenu } = HandActions;\r\nconst { getBoardActionMenu } = BoardActions;\r\n\r\nconst ArenaActions = ({\r\n  G,\r\n  myID,\r\n  moves,\r\n  actionMenu,\r\n  setActionMenu,\r\n  lifeMenu,\r\n  setLifeMenu,\r\n  listMenu,\r\n  setListMenu,\r\n  statsMenu,\r\n  setStatsMenu,\r\n  setSelectToBoard,\r\n}) => {\r\n  const getLifeMenu = (life) => {\r\n    return MenuLifeData(life);\r\n  };\r\n\r\n  //GLOBALS\r\n\r\n  const deckMenu = (e) => {\r\n    setSelectToBoard(null);\r\n    setActionMenu(getDeckActionsOnMenu(e));\r\n  };\r\n\r\n  const dzMenu = (id, mine) => {\r\n    setListMenu(getDZForSearch(G, id, mine));\r\n  };\r\n\r\n  const oogMenu = () => {\r\n    setListMenu(getOOGForSearch(G.out));\r\n  };\r\n\r\n  const handMenu = (e, i) => {\r\n    setSelectToBoard(null);\r\n    setActionMenu(getHandActionsOnMenu(e, i, G.hand, myID));\r\n  };\r\n\r\n  const boardMenu = (e, tile, id) => {\r\n    setActionMenu(getBoardActionMenu(e, tile, id));\r\n  };\r\n\r\n  const clearListMenu = () => {\r\n    let wasDeckMenu = listMenu.header === Strings.deckHeader;\r\n    setListMenu(null);\r\n    if (wasDeckMenu) {\r\n      setTimeout(moves.shuffleDeck, 100);\r\n    }\r\n  };\r\n\r\n  const clearMenuCallback = () => {\r\n    if (actionMenu) {\r\n      setActionMenu(null);\r\n    } else if (listMenu) {\r\n      clearListMenu();\r\n    } else if (lifeMenu) {\r\n      setLifeMenu(null);\r\n    } else if (statsMenu) {\r\n      setStatsMenu(null);\r\n    } else if (G.reveal[myID]) {\r\n      moves.clearReveal();\r\n    }\r\n  };\r\n\r\n  //MOVES\r\n\r\n  const spawnFaceUp = (...args) => {\r\n    setSelectToBoard(HandActions.spawnFaceUp(...args));\r\n  };\r\n\r\n  const spawnFaceDown = (...args) => {\r\n    setSelectToBoard(HandActions.spawnFaceDown(...args));\r\n  };\r\n\r\n  const reborn = (...args) => {\r\n    setSelectToBoard(DestroyActions.reborn(...args));\r\n  };\r\n\r\n  const getDeckForSearch = () => {\r\n    setListMenu(DeckActions.getDeckForSearch(G.deck[myID].cards));\r\n  };\r\n\r\n  const myLifeMenu = () => {\r\n    setLifeMenu(getLifeMenu(G.life[myID]));\r\n  };\r\n\r\n  const getTileCardsList = (...args) => {\r\n    setListMenu(BoardActions.getTileCardsList(...args));\r\n  };\r\n\r\n  const moveInBoard = (...args) => {\r\n    setSelectToBoard(BoardActions.moveInBoard(G.board, ...args));\r\n  };\r\n\r\n  const selectToAttack = (...args) => {\r\n    setSelectToBoard(BoardActions.selectToAttack(G.board, ...args));\r\n  };\r\n\r\n  const actionsMenu = (menu) => {\r\n    setActionMenu(menu);\r\n  };\r\n\r\n  const openStatsMenu = (...args) => {\r\n    setStatsMenu(BoardActions.openStatsMenu(G.board, ...args));\r\n  };\r\n\r\n  return {\r\n    global: {\r\n      getLifeMenu,\r\n      deckMenu,\r\n      dzMenu,\r\n      oogMenu,\r\n      handMenu,\r\n      boardMenu,\r\n      clearListMenu,\r\n      clearMenuCallback,\r\n    },\r\n\r\n    moves: {\r\n      spawnFaceUp,\r\n      spawnFaceDown,\r\n      reborn,\r\n      getDeckForSearch,\r\n      myLifeMenu,\r\n      actionsMenu,\r\n      getTileCardsList,\r\n      moveInBoard,\r\n      selectToAttack,\r\n      openStatsMenu,\r\n    },\r\n  };\r\n};\r\n\r\nexport default ArenaActions;\r\n","import React, { useState } from \"react\";\r\nimport { getDeckService } from \"service/api\";\r\nimport MenuLayer from \"Client/ui/components/fragments/menu-layer\";\r\nimport DeckColumn from \"Client/ui/components/fragments/deck-column\";\r\nimport HandColumn from \"Client/ui/components/fragments/hand-column\";\r\nimport ControlColumn from \"Client/ui/components/fragments/control-column\";\r\nimport StatusColumn from \"Client/ui/components/fragments/status-column\";\r\nimport DeckActions from \"Client/actions/deck\";\r\nimport ArenaActions from \"Client/handlers/arena\";\r\nimport Card from \"Client/ui/components/card/card\";\r\nimport \"Client/ui/styles/arena.css\";\r\n\r\nconst Arena = ({G, ctx, playerID, deckID, moves, events}) => {\r\n  const myID = parseInt(playerID);\r\n  const rivalID = myID === 0 ? 1 : 0;\r\n\r\n  const [actionMenu, setActionMenu] = useState(null);\r\n  const [highlightCard, setHighlightCard] = useState(Card(\"\", -1));\r\n  const [listMenu, setListMenu] = useState(null);\r\n  const [statsMenu, setStatsMenu] = useState(null);\r\n  const [lifeMenu, setLifeMenu] = useState(null);\r\n  const [selectToBoard, setSelectToBoard] = useState(null);\r\n\r\n  const setters = {setActionMenu, setHighlightCard, setListMenu, setStatsMenu, setLifeMenu, setSelectToBoard}\r\n  const getters = {actionMenu, highlightCard, listMenu, statsMenu, lifeMenu, selectToBoard}\r\n\r\n  const params = {G, myID, moves, ...setters, ...getters,}\r\n\r\n  const actions = ArenaActions(params)\r\n  const clientSideMoves = actions.moves;\r\n  const {deckMenu, dzMenu, oogMenu, handMenu,\r\n    boardMenu, clearMenuCallback} = actions.global;\r\n\r\n  const isSelected = (place) =>\r\n    selectToBoard && selectToBoard.origin[place] !== undefined;\r\n\r\n  React.useEffect(() => {\r\n    const deckStart = async () => {\r\n      let cards = await getDeckService(deckID);\r\n      moves.setDeck(DeckActions.constructDeck(deckID, cards, myID));\r\n    };\r\n\r\n    if (deckID !== G.deck[myID].id) {\r\n      deckStart();\r\n    }\r\n  }, [moves, deckID, G, myID]);\r\n\r\n  const clearSelectionCallback = () => {\r\n    setSelectToBoard(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"arena\">\r\n      <MenuLayer\r\n        actionMenu={actionMenu}\r\n        listMenu={listMenu}\r\n        revealMenu={G.reveal[myID]}\r\n        lifeMenu={lifeMenu}\r\n        statsMenu={statsMenu}\r\n        ids={[myID, rivalID]}\r\n        moves={Object.assign(moves, clientSideMoves)}\r\n        highlight={setHighlightCard}\r\n        clear={clearMenuCallback}\r\n      />\r\n\r\n      <DeckColumn\r\n        ids={[myID, rivalID]}\r\n        decks={G.deck}\r\n        dzs={G.destroyZone}\r\n        out={G.out}\r\n        selection={isSelected}\r\n        highlight={setHighlightCard}\r\n        menu={[deckMenu, dzMenu, oogMenu]}\r\n      />\r\n\r\n      <HandColumn\r\n        ids={[myID, rivalID]}\r\n        life={G.life}\r\n        hand={G.hand}\r\n        board={G.board}\r\n        moves={moves}\r\n        actions={[\r\n          handMenu,\r\n          boardMenu,\r\n          selectToBoard,\r\n          clearSelectionCallback,\r\n          setHighlightCard,\r\n        ]}\r\n      />\r\n\r\n      <ControlColumn\r\n        ids={[myID, rivalID]}\r\n        currentPlayer={parseInt(ctx.currentPlayer)}\r\n        moves={moves}\r\n        events={events}\r\n        reveal={G.reveal}\r\n      />\r\n\r\n      <StatusColumn card={highlightCard} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Arena;\r\n","import { Client, Lobby } from \"boardgame.io/react\";\r\nimport { SocketIO } from \"boardgame.io/multiplayer\";\r\nimport { Simulator } from \"./Game\";\r\nimport Arena from \"./Client/ui/pages/arena\";\r\nimport \"./Client/ui/styles/globals.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst SimulatorClient = Client({\r\n  game: Simulator,\r\n  board: Arena,\r\n  debug: false,\r\n  multiplayer: SocketIO({ server: \"localhost:8000\" }),\r\n});\r\n\r\nconst lobby = (\r\n  <Lobby\r\n    gameServer={`https://${window.location.hostname}:8000`}\r\n    lobbyServer={`https://${window.location.hostname}:8000`}\r\n    gameComponents={[{ game: Simulator, board: Arena }]}\r\n  />\r\n);\r\n\r\nconst App = () => {\r\n  const [playerID, setPlayerID] = useState(null);\r\n  //const startGame = (playerID, deckID = 1) => {};\r\n\r\n  if (playerID) {\r\n    return <SimulatorClient playerID={playerID} deckID={1} />;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <p>Play as</p>\r\n        <button onClick={() => setPlayerID(\"0\")}>Player 0</button>\r\n        <button onClick={() => setPlayerID(\"1\")}>Player 1</button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}